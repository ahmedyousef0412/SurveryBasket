


In C#, default is a keyword used to initialize a variable with the default value for its type.
When used with CancellationToken, default initializes the CancellationToken to its default value,
which is an empty (or non-cancelable) token

CancellationToken cancellationToken = default;

It is equivalent to:
CancellationToken cancellationToken = new CancellationToken();
or
CancellationToken cancellationToken = CancellationToken.None;

--------------------------------------------------------

Advantages of Using record for Response Models
Immutability:

Records are immutable by default, which means once an instance is created, 
its state cannot be modified. This is particularly useful for response models,
as it ensures that the data being sent in the response cannot be altered inadvertently after creation.


Value-Based Equality:

Records provide value-based equality, meaning two records with the same data are considered equal. 
This is useful for comparing response objects or using them as keys in collections.



Built-In Functionality:

Records automatically generate useful methods such as ToString, Equals, and GetHashCode,
which are implemented in a value-based manner. This reduces the need for manual implementation.




With-Expressions:

Records support with-expressions, which allow for creating modified copies of records with ease.
This is useful when you need to create a new response object with slight modifications based on an existing one.


var initialAuthResponse = new AuthResponse(
    Id: "123",
    Email: "user@example.com",
    FirstName: "John",
    LastName: "Doe",
    Token: "jwt-token",
    ExpiresIn: 3600,
    RefreshToken: "refresh-token",
    RefreshTokenExpiresOn: DateTime.UtcNow.AddDays(7)
);

Console.WriteLine(initialAuthResponse);



var updatedAuthResponse = initialAuthResponse with
{
    Token: "new-jwt-token",
    ExpiresIn: 7200
};

Console.WriteLine(updatedAuthResponse);

-------------------------------------------------------

Why use serilog?
 Serilog promotes structured logging, where log events are represented as objects with named properties.
 This makes your logs more readable, searchable, and easier to analyze with tools.
 Compared to traditional string-based logging, 
 structured logs provide a clearer understanding of what's happening in your application.


 If I want to log in Database => Install package Serilog.Sinks.MSSqlServer


 ---------------------------------------------------------------------------

Security and Concurrency stamps are mechanisms used to enhance the security and consistency of user authentication.

Security Stamp
The security stamp is a token used to invalidate user sessions.
When significant changes occur to a user's account (e.g., password change, account lockout),
the security stamp is updated. This causes all existing authentication cookies to be invalidated, 
forcing the user to log in again



Concurrency Stamp
The concurrency stamp is used to handle concurrency conflicts when updating user data.
It's a unique value stored with the user record in the database. When an update occurs,
the concurrency stamp is checked to ensure no other updates have occurred. 
If the stamp has changed, a concurrency exception is thrown.


Security Stamp: Used to invalidate user sessions after significant changes.
Concurrency Stamp: Ensures data consistency by preventing concurrent updates.
------------------------------------------------------------------------------------------------------------

Request Handling
class PermissionRequirment(string permission):IAuthorizationRequirement

1 - When a request is made to an endpoint with the HasPermission attribute,
public class HasPermissionAttribute(string permission) : AuthorizeAttribute(permission) { }

2 - 
class PermissionAuthorizationPolicyProvider(IOptions<AuthorizationOptions> options)
:DefaultAuthorizationPolicyProvider(options)


the authorization middleware invokes the custom authorization policy provider.
The policy provider checks if a policy with the given name (e.g., "ReadData") exists.
If the policy does not exist, it creates a new one using the AuthorizationPolicyBuilder and adds it to the authorization options.

3 - public class PermissionAuthorizeHandler : AuthorizationHandler<PermissionRequirment>
The authorization handler then checks if the user has the required permission by examining their claims.
If the user has the required permission, the handler succeeds, and the request is allowed to proceed.
If the user does not have the required permission, the request is denied.